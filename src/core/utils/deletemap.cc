#include "deletemap.h"
#include <stdlib.h>
#include <stdio.h>
#include "src/core/common/common_define.h"
#include "src/core/utils/dump_util.h"

MERCURY_NAMESPACE_BEGIN(core);

const std::string DeleteMap::DELETE_MAP("delete_map");

const uint64_t DeleteMap::BITMAPOPMASK[SLOT_SIZE] =
{
    0x8000000000000000, 0x4000000000000000, 0x2000000000000000, 0x1000000000000000,
    0x0800000000000000, 0x0400000000000000, 0x0200000000000000, 0x0100000000000000,
    0x0080000000000000, 0x0040000000000000, 0x0020000000000000, 0x0010000000000000,
    0x0008000000000000, 0x0004000000000000, 0x0002000000000000, 0x0001000000000000,
    0x0000800000000000, 0x0000400000000000, 0x0000200000000000, 0x0000100000000000,
    0x0000080000000000, 0x0000040000000000, 0x0000020000000000, 0x0000010000000000,
    0x0000008000000000, 0x0000004000000000, 0x0000002000000000, 0x0000001000000000,
    0x0000000800000000, 0x0000000400000000, 0x0000000200000000, 0x0000000100000000,
    0x0000000080000000, 0x0000000040000000, 0x0000000020000000, 0x0000000010000000,
    0x0000000008000000, 0x0000000004000000, 0x0000000002000000, 0x0000000001000000,
    0x0000000000800000, 0x0000000000400000, 0x0000000000200000, 0x0000000000100000,
    0x0000000000080000, 0x0000000000040000, 0x0000000000020000, 0x0000000000010000,
    0x0000000000008000, 0x0000000000004000, 0x0000000000002000, 0x0000000000001000,
    0x0000000000000800, 0x0000000000000400, 0x0000000000000200, 0x0000000000000100,
    0x0000000000000080, 0x0000000000000040, 0x0000000000000020, 0x0000000000000010,
    0x0000000000000008, 0x0000000000000004, 0x0000000000000002, 0x0000000000000001
};

const uint64_t DeleteMap::START_MASK[SLOT_SIZE] =
{
    0xFFFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF, 0x3FFFFFFFFFFFFFFF, 0x1FFFFFFFFFFFFFFF,
    0x0FFFFFFFFFFFFFFF, 0x07FFFFFFFFFFFFFF, 0x03FFFFFFFFFFFFFF, 0x01FFFFFFFFFFFFFF,
    0x00FFFFFFFFFFFFFF, 0x007FFFFFFFFFFFFF, 0x003FFFFFFFFFFFFF, 0x001FFFFFFFFFFFFF,
    0x000FFFFFFFFFFFFF, 0x0007FFFFFFFFFFFF, 0x0003FFFFFFFFFFFF, 0x0001FFFFFFFFFFFF,
    0x0000FFFFFFFFFFFF, 0x00007FFFFFFFFFFF, 0x00003FFFFFFFFFFF, 0x00001FFFFFFFFFFF,
    0x00000FFFFFFFFFFF, 0x000007FFFFFFFFFF, 0x000003FFFFFFFFFF, 0x000001FFFFFFFFFF,
    0x000000FFFFFFFFFF, 0x0000007FFFFFFFFF, 0x0000003FFFFFFFFF, 0x0000001FFFFFFFFF,
    0x0000000FFFFFFFFF, 0x00000007FFFFFFFF, 0x00000003FFFFFFFF, 0x00000001FFFFFFFF,
    0x00000000FFFFFFFF, 0x000000007FFFFFFF, 0x000000003FFFFFFF, 0x000000001FFFFFFF,
    0x000000000FFFFFFF, 0x0000000007FFFFFF, 0x0000000003FFFFFF, 0x0000000001FFFFFF,
    0x0000000000FFFFFF, 0x00000000007FFFFF, 0x00000000003FFFFF, 0x00000000001FFFFF,
    0x00000000000FFFFF, 0x000000000007FFFF, 0x000000000003FFFF, 0x000000000001FFFF,
    0x000000000000FFFF, 0x0000000000007FFF, 0x0000000000003FFF, 0x0000000000001FFF,
    0x0000000000000FFF, 0x00000000000007FF, 0x00000000000003FF, 0x00000000000001FF,
    0x00000000000000FF, 0x000000000000007F, 0x000000000000003F, 0x000000000000001F,
    0x000000000000000F, 0x0000000000000007, 0x0000000000000003, 0x0000000000000001
};

const uint64_t DeleteMap::END_MASK[SLOT_SIZE] =
{
    0x8000000000000000, 0xC000000000000000, 0xE000000000000000, 0xF000000000000000,
    0xF800000000000000, 0xFC00000000000000, 0xFE00000000000000, 0xFF00000000000000,
    0xFF80000000000000, 0xFFC0000000000000, 0xFFE0000000000000, 0xFFF0000000000000,
    0xFFF8000000000000, 0xFFFC000000000000, 0xFFFE000000000000, 0xFFFF000000000000,
    0xFFFF800000000000, 0xFFFFC00000000000, 0xFFFFE00000000000, 0xFFFFF00000000000,
    0xFFFFF80000000000, 0xFFFFFC0000000000, 0xFFFFFE0000000000, 0xFFFFFF0000000000,
    0xFFFFFF8000000000, 0xFFFFFFC000000000, 0xFFFFFFE000000000, 0xFFFFFFF000000000,
    0xFFFFFFF800000000, 0xFFFFFFFC00000000, 0xFFFFFFFE00000000, 0xFFFFFFFF00000000,
    0xFFFFFFFF80000000, 0xFFFFFFFFC0000000, 0xFFFFFFFFE0000000, 0xFFFFFFFFF0000000,
    0xFFFFFFFFF8000000, 0xFFFFFFFFFC000000, 0xFFFFFFFFFE000000, 0xFFFFFFFFFF000000,
    0xFFFFFFFFFF800000, 0xFFFFFFFFFFC00000, 0xFFFFFFFFFFE00000, 0xFFFFFFFFFFF00000,
    0xFFFFFFFFFFF80000, 0xFFFFFFFFFFFC0000, 0xFFFFFFFFFFFE0000, 0xFFFFFFFFFFFF0000,
    0xFFFFFFFFFFFF8000, 0xFFFFFFFFFFFFC000, 0xFFFFFFFFFFFFE000, 0xFFFFFFFFFFFFF000,
    0xFFFFFFFFFFFFF800, 0xFFFFFFFFFFFFFC00, 0xFFFFFFFFFFFFFE00, 0xFFFFFFFFFFFFFF00,
    0xFFFFFFFFFFFFFF80, 0xFFFFFFFFFFFFFFC0, 0xFFFFFFFFFFFFFFE0, 0xFFFFFFFFFFFFFFF0,
    0xFFFFFFFFFFFFFFF8, 0xFFFFFFFFFFFFFFFC, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF
};

DeleteMap::DeleteMap(uint64_t maxDocCnt) 
    : _maxDocCnt(maxDocCnt),
      _pBitMap(nullptr)
{
    _byteSize = (_maxDocCnt + SLOT_SIZE - 1) / SLOT_SIZE * (SLOT_SIZE / 8); 
    pthread_spin_init(&_spinLock, PTHREAD_PROCESS_PRIVATE);
}

DeleteMap::~DeleteMap(void)
{
    unmount();
    pthread_spin_destroy(&_spinLock);
}

int DeleteMap::mount(char *pBase, uint64_t bufSize, bool bCreate)
{
    if (pBase == nullptr) {
        LOG_ERROR("Mount delete map meets nullptr");
        return mercury::IndexError_InvalidArgument;
    }

    _pBitMap = reinterpret_cast<uint64_t *>(pBase);
    if (_byteSize != bufSize) {
        LOG_ERROR("Mount size [%lu] doesn't match size [%lu]",
                  bufSize, _byteSize);
        return mercury::IndexError_Mismatch;
    }

    if (bCreate) {
        memset(_pBitMap, 0, _byteSize);
    }

    return 0;
}

int DeleteMap::unmount(void)
{
    _pBitMap = nullptr;

    return 0;
}

int DeleteMap::dump(const std::string &file)
{
    return DumpUtil::dump(reinterpret_cast<char *>(_pBitMap), _byteSize, file);
}

int DeleteMap::dump(const std::string &file, 
                    const mercury::core::IndexStorage::Pointer &stg)
{
    return DumpUtil::dump(reinterpret_cast<char *>(_pBitMap), _byteSize, 
                          file, stg);
}

uint64_t DeleteMap::needMemSize(uint64_t maxDocCnt)
{
    return (maxDocCnt + SLOT_SIZE - 1) / SLOT_SIZE * (SLOT_SIZE / 8); 
}

MERCURY_NAMESPACE_END(core);

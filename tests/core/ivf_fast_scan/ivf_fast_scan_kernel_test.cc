/// Copyright (c) 2024, xiaohongshu Inc. All rights reserved.
/// Author: haiming <shiyang1@xiaohongshu.com>
/// Created: 2024-09-04 10:45

#include <gtest/gtest.h>
#include <iostream>
#include <fstream>

#define protected public
#define private public
#include "src/core/algorithm/pq_common.h"
#include "src/core/algorithm/ivf_fast_scan/fastscan_kernel.h"
#include "src/core/algorithm/ivf_fast_scan/fastscan_scorer.h"
#include "src/core/algorithm/ivf_fast_scan/fastscan_index.h"
#include "src/core/algorithm/ivf_fast_scan/look_up_table.h"
#undef protected
#undef private

MERCURY_NAMESPACE_BEGIN(core);

class IvfFastScanKernelTest: public testing::Test
{
public:
    void SetUp() {}
    void TearDown() {}
};

TEST_F(IvfFastScanKernelTest, TestPQ4PackedCode) {
    const uint8_t test_codes[1024] = {4, 4, 4, 7, 9, 5, 11, 4, 13, 15, 0, 14, 13, 4, 9, 2, 4, 11, 3, 15, 8, 2, 1, 5, 11, 15, 2, 11, 9, 10, 15, 4, 7, 9, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 1, 7, 7, 4, 7, 7, 7, 7, 7, 14, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 5, 10, 4, 10, 10, 10, 10, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 10, 5, 12, 5, 13, 6, 6, 5, 5, 6, 5, 15, 10, 4, 7, 8, 5, 2, 13, 0, 11, 3, 2, 6, 2, 9, 9, 9, 11, 11, 14, 1, 6, 13, 9, 7, 3, 7, 11, 0, 6, 8, 6, 9, 13, 8, 15, 7, 15, 2, 12, 0, 1, 11, 0, 5, 14, 5, 9, 10, 8, 15, 8, 7, 14, 10, 6, 12, 12, 2, 5, 4, 14, 6, 2, 2, 3, 7, 2, 7, 13, 6, 3, 13, 14, 12, 3, 12, 1, 3, 13, 2, 15, 9, 0, 0, 0, 1, 11, 14, 14, 8, 11, 5, 1, 8, 8, 7, 13, 13, 11, 5, 10, 9, 4, 2, 4, 2, 8, 6, 0, 9, 7, 5, 12, 6, 3, 5, 7, 0, 14, 12, 8, 3, 3, 4, 9, 5, 14, 15, 1, 15, 0, 14, 8, 1, 11, 11, 2, 12, 10, 7, 7, 5, 9, 2, 5, 15, 2, 5, 7, 2, 14, 14, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 14, 14, 14, 5, 14, 5, 14, 14, 14, 14, 13, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 7, 9, 9, 9, 9, 9, 9, 9, 7, 9, 9, 9, 9, 13, 9, 9, 13, 12, 6, 14, 15, 3, 0, 0, 6, 3, 12, 8, 3, 9, 7, 10, 14, 0, 9, 10, 2, 15, 9, 9, 12, 11, 4, 2, 6, 3, 0, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 14, 0, 0, 0, 14, 6, 0, 0, 0, 11, 4, 11, 11, 11, 11, 11, 12, 11, 11, 11, 11, 11, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 12, 15, 15, 4, 15, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 12, 2, 2, 2, 14, 2, 2, 14, 2, 2, 14, 7, 2, 2, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 4, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 1, 6, 10, 14, 3, 8, 0, 2, 15, 10, 9, 11, 1, 15, 2, 11, 9, 3, 0, 14, 5, 12, 5, 0, 10, 6, 1, 10, 3, 9, 4, 14, 9, 5, 7, 3, 11, 8, 10, 2, 11, 0, 15, 11, 7, 10, 2, 7, 5, 11, 0, 15, 0, 12, 2, 15, 4, 2, 7, 6, 0, 0, 6, 5, 6, 13, 6, 4, 15, 0, 9, 14, 2, 14, 2, 0, 4, 4, 8, 2, 6, 15, 14, 9, 6, 9, 0, 2, 12, 6, 5, 9, 3, 11, 3, 8, 14, 12, 12, 10, 10, 4, 4, 7, 12, 10, 11, 14, 0, 15, 4, 11, 12, 2, 0, 0, 11, 1, 5, 0, 2, 5, 9, 10, 4, 9, 8, 10, 1, 13, 13, 13, 8, 13, 13, 13, 13, 13, 13, 13, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1, 13, 0, 6, 9, 6, 6, 9, 2, 13, 2, 12, 9, 7, 7, 13, 15, 10, 9, 1, 8, 0, 10, 0, 14, 6, 9, 0, 15, 9, 1, 5, 8, 14, 9, 4, 10, 3, 11, 1, 11, 3, 2, 13, 10, 1, 4, 1, 8, 11, 4, 11, 0, 1, 13, 7, 11, 6, 4, 6, 10, 15, 9, 7, 13, 7, 3, 3, 3, 3, 3, 3, 3, 15, 3, 3, 14, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 4, 12, 12, 5, 14, 11, 12, 10, 14, 6, 7, 3, 8, 10, 12, 9, 5, 10, 8, 13, 14, 7, 12, 9, 1, 1, 12, 3, 3, 3, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 7, 4, 4, 4, 4, 4, 5, 5, 5, 14, 5, 5, 13, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 12, 5, 4, 5, 3, 5, 5, 5, 5, 5, 7, 10, 5, 10, 6, 5, 5, 10, 4, 14, 10, 8, 3, 13, 7, 8, 11, 9, 5, 14, 14, 4, 12, 8, 5, 10, 6, 11, 1, 8, 2, 6, 15, 3, 11, 10, 5, 7, 0, 0, 4, 5, 14, 10, 10, 14, 7, 8, 15, 4, 5, 10, 10, 13, 12, 2, 14, 14, 6, 8, 8, 13, 13, 8, 5, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 5, 1, 1, 11, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3};
    uint8_t * test_ori_codes = new(std::nothrow) uint8_t[1024];
    std::copy(test_codes, test_codes + 1024, test_ori_codes);

    uint8_t * test_packed_codes = new(std::nothrow) uint8_t[512];
    memset(test_packed_codes, 0U, 512);

    uint8_t* codes2 = test_packed_codes;

    const uint8_t perm0[16] = {0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15};

    for (size_t i0 = 0; i0 < 32; i0 += 32) {
        for (size_t sq = 0; sq < 32; sq += 2) {
            std::array<uint8_t, 32> c0, c1;
            FastScanIndex::get_matrix_column(
                    test_ori_codes, 32, 32, i0, sq, c0);
            FastScanIndex::get_matrix_column(
                    test_ori_codes, 32, 32, i0, sq + 1, c1);
            for (int j = 0; j < 16; j++) {
                uint8_t d0, d1;
                d0 = c0[perm0[j]] | (c0[perm0[j] + 16] << 4);
                d1 = c1[perm0[j]] | (c1[perm0[j] + 16] << 4);
                codes2[j] = d0;
                codes2[j + 16] = d1;
            }
            codes2 += 32;
        }
    }
    std::cout << "The final packedCode is: " << std::endl;
    for (size_t k = 0; k < 512; k++) {
        std::cout << unsigned(test_packed_codes[k]) << " ";
    }
    std::cout << std::endl;
}

TEST_F(IvfFastScanKernelTest, TestLutQuantization) {
    float test_lut[] = {1.96864f, 1.52688f, 6.54913f, 2.35791f, 0.0743886f, 0.996937f, 1.48981f, 4.74156f, 4.54852f, 2.09228f, 4.32816f, 0.365324f, 1.88674f, 2.10001f, 0.375135f, 4.06567f, 3.67454f, 20.3536f, 3.34237f, 8.75177f, 0.223011f, 4.8654f, 2.60083f, 9.568f, 5.91515f, 6.82533f, 11.1583f, 5.57458f, 4.99397f, 4.55237f, 1.31283f, 6.22774f, 8.44894f, 0.354662f, 1.91353f, 1.61008f, 0.0325027f, 1.42744f, 1.25827f, 1.60714f, 0.564261f, 1.54629f, 1.31113f, 4.41938f, 6.68939f, 2.04544f, 2.4018f, 1.07645f, 7.2559f, 0.587869f, 1.91281f, 2.13325f, 0.470716f, 3.40045f, 0.194712f, 0.106172f, 2.79766f, 1.06864f, 2.06494f, 1.23514f, 9.34717f, 1.30816f, 1.07446f, 1.31542f, 0.419788f, 1.84711f, 0.803754f, 4.65292f, 3.95318f, 2.03729f, 1.85829f, 7.39731f, 1.9361f, 0.0503441f, 9.75873f, 1.16983f, 1.44472f, 3.84552f, 2.22006f, 0.758601f, 4.95546f, 1.19082f, 3.61577f, 3.35094f, 8.81874f, 0.0459661f, 2.05815f, 1.6472f, 2.36029f, 10.7259f, 0.415622f, 1.91993f, 3.09955f, 1.44198f, 0.491292f, 2.03742f, 0.321324f, 3.45023f, 3.38803f, 2.91824f, 8.6685f, 1.23235f, 5.47318f, 6.8424f, 4.80817f, 6.21408f, 7.48652f, 0.0778038f, 0.844534f, 1.93803f, 4.30724f, 3.48759f, 1.11406f, 9.57344f, 1.60089f, 0.462581f, 0.188173f, 7.02135f, 7.36049f, 22.8076f, 2.50484f, 12.4157f, 4.4126f, 3.27014f, 0.574113f, 9.12858f, 3.25673f, 2.21125f, 0.513294f, 7.90935f, 17.076f, 7.10552f, 7.68372f, 8.43659f, 4.6454f, 7.45864f, 0.484449f, 7.67037f, 4.79697f, 8.08783f, 8.18372f, 0.065424f, 4.67048f, 8.60328f, 0.574016f, 1.57051f, 3.07271f, 4.22838f, 3.29141f, 2.04337f, 6.67652f, 4.7226f, 2.00707f, 10.0285f, 3.31884f, 0.616394f, 6.30739f, 0.708158f, 4.79723f, 0.0575589f, 0.0177145f, 2.76617f, 6.35796f, 1.36254f, 13.2691f, 3.7857f, 8.68935f, 2.39519f, 1.60794f, 1.57962f, 6.06287f, 7.61642f, 0.692098f, 1.91418f, 0.204485f, 1.29217f, 1.3313f, 0.501431f, 1.81546f, 0.86247f, 0.202246f, 1.56057f, 0.669956f, 1.4725f, 3.14746f, 7.47905f, 2.59184f, 1.73607f, 1.05381f, 8.69606f, 0.00533785f, 2.81319f, 5.78735f, 1.61985f, 12.4992f, 8.27483f, 13.5834f, 16.986f, 17.0039f, 1.59856f, 2.88156f, 7.58566f, 4.61798f, 9.80685f, 2.65023f, 0.11713f, 8.44908f, 6.47486f, 6.1641f, 1.0372f, 3.59648f, 4.42597f, 0.00768547f, 0.991152f, 6.101f, 0.475201f, 0.86633f, 1.67296f, 3.58112f, 0.120592f, 1.08284f, 2.06917f, 1.53698f, 2.4061f, 4.61756f, 10.8366f, 2.18127f, 7.5383f, 5.41642f, 6.21426f, 13.9313f, 7.47241f, 14.0111f, 0.260733f, 4.96849f, 29.5079f, 11.5562f, 9.94117f, 5.01092f, 15.3018f, 5.60207f, 0.624401f, 0.13672f, 10.8142f, 0.583357f, 1.05402f, 0.585985f, 1.0773f, 4.73977f, 1.95769f, 5.83179f, 5.7042f, 4.45224f, 2.50304f, 5.3521f, 1.05199f, 8.84327f, 6.09388f, 3.86007f, 9.56087f, 0.256424f, 1.77779f, 3.71881f, 4.64677f, 8.45066f, 1.83077f, 5.60422f, 5.33152f, 5.33725f, 12.0505f, 0.856628f, 7.77677f, 7.99008f, 3.39391f, 1.46309f, 24.4625f, 1.86804f, 5.07208f, 2.47088f, 18.3112f, 1.61771f, 13.2715f, 5.46629f, 0.363697f, 5.0709f, 8.49328f, 2.75634f, 2.15533f, 5.26473f, 3.46548f, 3.7122f, 0.0123058f, 0.797015f, 2.01468f, 5.30037f, 2.19171f, 0.200599f, 1.24016f, 1.60655f, 1.96709f, 0.957478f, 10.7614f, 6.40874f, 0.114153f, 2.51648f, 6.39153f, 1.58565f, 1.96025f, 2.76597f, 3.75244f, 2.05462f, 1.94152f, 0.134421f, 6.04552f, 2.37669f, 0.931292f, 0.678414f, 1.88064f, 2.85046f, 0.0631847f, 0.23343f, 3.35041f, 3.90287f, 0.566598f, 1.34208f, 5.4315f, 3.00309f, 2.49964f, 0.00482792f, 0.595476f, 1.99137f, 5.06219f, 0.271326f, 2.53281f, 4.89997f, 1.53925f, 5.12061f, 7.5187f, 0.70221f, 13.729f, 11.3604f, 3.65012f, 9.69011f, 3.7789f, 5.7004f, 24.8104f, 7.67008f, 11.5857f, 8.63467f, 16.5364f, 7.18268f, 6.07928f, 1.92021f, 0.018348f, 4.47815f, 0.663994f, 1.70019f, 8.81294f, 2.48924f, 2.65617f, 3.81419f, 1.04944f, 0.512056f, 0.308817f, 3.88333f, 5.73791f, 1.72346f, 8.21217f, 2.84143f, 2.17526f, 4.52755f, 7.40125f, 1.05545f, 0.186421f, 1.49663f, 2.62627f, 6.07171f, 3.7704f, 1.80072f, 2.68742f, 0.648346f, 5.45311f, 2.21186f, 4.95639f, 5.30945f, 0.0486332f, 4.53258f, 3.98993f, 3.98003f, 5.2563f, 0.853866f, 0.194178f, 1.06657f, 0.859587f, 0.964269f, 0.0260601f, 1.89199f, 1.40164f, 1.91468f, 7.49051f, 3.45672f, 2.02982f, 6.57777f, 1.42421f, 1.30786f, 0.424736f, 5.19879f, 8.30083f, 3.20826f, 3.33361f, 3.81915f, 12.2258f, 10.9378f, 0.549505f, 10.5884f, 0.0654146f, 2.60581f, 1.08602f, 0.105451f, 5.48038f, 9.17013f, 2.07909f, 7.71169f, 8.79645f, 2.23867f, 3.33823f, 5.60018f, 15.6891f, 1.60291f, 18.5881f, 3.46583f, 0.647098f, 8.98635f, 7.28788f, 5.86218f, 7.11577f, 5.92855f, 7.69583f, 5.30117f, 7.02496f, 25.4127f, 1.8726f, 7.55184f, 0.960758f, 10.4714f, 5.11354f, 7.90401f, 13.0419f, 5.63121f, 5.73518f, 4.23971f, 2.77971f, 1.06783f, 8.1229f, 0.975322f, 9.26188f, 2.03379f, 0.0102668f, 6.32776f, 0.990702f, 12.6169f, 0.922453f, 8.69792f, 0.950093f, 14.5694f, 2.15189f, 1.02061f, 4.96749f, 2.51014f, 9.56114f, 6.31429f, 2.70394f, 3.03422f, 5.81814f, 0.0735231f, 4.37365f, 7.39141f, 5.0493f, 8.14367f, 4.36195f, 3.2765f, 4.71303f, 8.0187f, 1.26291f, 1.27828f, 2.36977f, 8.86564f, 9.77864f, 14.7894f, 13.456f, 5.03154f, 8.62485f, 2.38906f, 6.66399f, 5.71788f, 0.0f, 10.6974f, 17.4808f, 11.2575f, 13.8218f, 0.116706f, 2.91427f, 4.00303f, 1.63026f, 5.12672f, 22.4281f, 2.39126f, 8.39425f, 10.8591f, 8.32402f, 4.29345f, 5.88407f};
    LoopUpTable* lut = new LoopUpTable();
    lut->_centroidNum = 16;
    lut->_fragmentNum = 32;
    lut->_distanceArray = new(std::nothrow) distance_t[lut->_centroidNum * lut->_fragmentNum];
    std::copy(test_lut, test_lut + 512, lut->_distanceArray);
    lut->quantizeLoopUpTable();
    lut->print_tab();
    lut->print_qtab();
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[0], 17);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[21], 40);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[495], 0);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[511], 50);
    ASSERT_EQ(lut->getScale(), 8.71879292f);
    ASSERT_EQ(lut->getBias(), 4.4322629f);
}

TEST_F(IvfFastScanKernelTest, TestDistanceComputation1) {
    float test_lut[] = {1.96864f, 1.52688f, 6.54913f, 2.35791f, 0.0743886f, 0.996937f, 1.48981f, 4.74156f, 4.54852f, 2.09228f, 4.32816f, 0.365324f, 1.88674f, 2.10001f, 0.375135f, 4.06567f, 3.67454f, 20.3536f, 3.34237f, 8.75177f, 0.223011f, 4.8654f, 2.60083f, 9.568f, 5.91515f, 6.82533f, 11.1583f, 5.57458f, 4.99397f, 4.55237f, 1.31283f, 6.22774f, 8.44894f, 0.354662f, 1.91353f, 1.61008f, 0.0325027f, 1.42744f, 1.25827f, 1.60714f, 0.564261f, 1.54629f, 1.31113f, 4.41938f, 6.68939f, 2.04544f, 2.4018f, 1.07645f, 7.2559f, 0.587869f, 1.91281f, 2.13325f, 0.470716f, 3.40045f, 0.194712f, 0.106172f, 2.79766f, 1.06864f, 2.06494f, 1.23514f, 9.34717f, 1.30816f, 1.07446f, 1.31542f, 0.419788f, 1.84711f, 0.803754f, 4.65292f, 3.95318f, 2.03729f, 1.85829f, 7.39731f, 1.9361f, 0.0503441f, 9.75873f, 1.16983f, 1.44472f, 3.84552f, 2.22006f, 0.758601f, 4.95546f, 1.19082f, 3.61577f, 3.35094f, 8.81874f, 0.0459661f, 2.05815f, 1.6472f, 2.36029f, 10.7259f, 0.415622f, 1.91993f, 3.09955f, 1.44198f, 0.491292f, 2.03742f, 0.321324f, 3.45023f, 3.38803f, 2.91824f, 8.6685f, 1.23235f, 5.47318f, 6.8424f, 4.80817f, 6.21408f, 7.48652f, 0.0778038f, 0.844534f, 1.93803f, 4.30724f, 3.48759f, 1.11406f, 9.57344f, 1.60089f, 0.462581f, 0.188173f, 7.02135f, 7.36049f, 22.8076f, 2.50484f, 12.4157f, 4.4126f, 3.27014f, 0.574113f, 9.12858f, 3.25673f, 2.21125f, 0.513294f, 7.90935f, 17.076f, 7.10552f, 7.68372f, 8.43659f, 4.6454f, 7.45864f, 0.484449f, 7.67037f, 4.79697f, 8.08783f, 8.18372f, 0.065424f, 4.67048f, 8.60328f, 0.574016f, 1.57051f, 3.07271f, 4.22838f, 3.29141f, 2.04337f, 6.67652f, 4.7226f, 2.00707f, 10.0285f, 3.31884f, 0.616394f, 6.30739f, 0.708158f, 4.79723f, 0.0575589f, 0.0177145f, 2.76617f, 6.35796f, 1.36254f, 13.2691f, 3.7857f, 8.68935f, 2.39519f, 1.60794f, 1.57962f, 6.06287f, 7.61642f, 0.692098f, 1.91418f, 0.204485f, 1.29217f, 1.3313f, 0.501431f, 1.81546f, 0.86247f, 0.202246f, 1.56057f, 0.669956f, 1.4725f, 3.14746f, 7.47905f, 2.59184f, 1.73607f, 1.05381f, 8.69606f, 0.00533785f, 2.81319f, 5.78735f, 1.61985f, 12.4992f, 8.27483f, 13.5834f, 16.986f, 17.0039f, 1.59856f, 2.88156f, 7.58566f, 4.61798f, 9.80685f, 2.65023f, 0.11713f, 8.44908f, 6.47486f, 6.1641f, 1.0372f, 3.59648f, 4.42597f, 0.00768547f, 0.991152f, 6.101f, 0.475201f, 0.86633f, 1.67296f, 3.58112f, 0.120592f, 1.08284f, 2.06917f, 1.53698f, 2.4061f, 4.61756f, 10.8366f, 2.18127f, 7.5383f, 5.41642f, 6.21426f, 13.9313f, 7.47241f, 14.0111f, 0.260733f, 4.96849f, 29.5079f, 11.5562f, 9.94117f, 5.01092f, 15.3018f, 5.60207f, 0.624401f, 0.13672f, 10.8142f, 0.583357f, 1.05402f, 0.585985f, 1.0773f, 4.73977f, 1.95769f, 5.83179f, 5.7042f, 4.45224f, 2.50304f, 5.3521f, 1.05199f, 8.84327f, 6.09388f, 3.86007f, 9.56087f, 0.256424f, 1.77779f, 3.71881f, 4.64677f, 8.45066f, 1.83077f, 5.60422f, 5.33152f, 5.33725f, 12.0505f, 0.856628f, 7.77677f, 7.99008f, 3.39391f, 1.46309f, 24.4625f, 1.86804f, 5.07208f, 2.47088f, 18.3112f, 1.61771f, 13.2715f, 5.46629f, 0.363697f, 5.0709f, 8.49328f, 2.75634f, 2.15533f, 5.26473f, 3.46548f, 3.7122f, 0.0123058f, 0.797015f, 2.01468f, 5.30037f, 2.19171f, 0.200599f, 1.24016f, 1.60655f, 1.96709f, 0.957478f, 10.7614f, 6.40874f, 0.114153f, 2.51648f, 6.39153f, 1.58565f, 1.96025f, 2.76597f, 3.75244f, 2.05462f, 1.94152f, 0.134421f, 6.04552f, 2.37669f, 0.931292f, 0.678414f, 1.88064f, 2.85046f, 0.0631847f, 0.23343f, 3.35041f, 3.90287f, 0.566598f, 1.34208f, 5.4315f, 3.00309f, 2.49964f, 0.00482792f, 0.595476f, 1.99137f, 5.06219f, 0.271326f, 2.53281f, 4.89997f, 1.53925f, 5.12061f, 7.5187f, 0.70221f, 13.729f, 11.3604f, 3.65012f, 9.69011f, 3.7789f, 5.7004f, 24.8104f, 7.67008f, 11.5857f, 8.63467f, 16.5364f, 7.18268f, 6.07928f, 1.92021f, 0.018348f, 4.47815f, 0.663994f, 1.70019f, 8.81294f, 2.48924f, 2.65617f, 3.81419f, 1.04944f, 0.512056f, 0.308817f, 3.88333f, 5.73791f, 1.72346f, 8.21217f, 2.84143f, 2.17526f, 4.52755f, 7.40125f, 1.05545f, 0.186421f, 1.49663f, 2.62627f, 6.07171f, 3.7704f, 1.80072f, 2.68742f, 0.648346f, 5.45311f, 2.21186f, 4.95639f, 5.30945f, 0.0486332f, 4.53258f, 3.98993f, 3.98003f, 5.2563f, 0.853866f, 0.194178f, 1.06657f, 0.859587f, 0.964269f, 0.0260601f, 1.89199f, 1.40164f, 1.91468f, 7.49051f, 3.45672f, 2.02982f, 6.57777f, 1.42421f, 1.30786f, 0.424736f, 5.19879f, 8.30083f, 3.20826f, 3.33361f, 3.81915f, 12.2258f, 10.9378f, 0.549505f, 10.5884f, 0.0654146f, 2.60581f, 1.08602f, 0.105451f, 5.48038f, 9.17013f, 2.07909f, 7.71169f, 8.79645f, 2.23867f, 3.33823f, 5.60018f, 15.6891f, 1.60291f, 18.5881f, 3.46583f, 0.647098f, 8.98635f, 7.28788f, 5.86218f, 7.11577f, 5.92855f, 7.69583f, 5.30117f, 7.02496f, 25.4127f, 1.8726f, 7.55184f, 0.960758f, 10.4714f, 5.11354f, 7.90401f, 13.0419f, 5.63121f, 5.73518f, 4.23971f, 2.77971f, 1.06783f, 8.1229f, 0.975322f, 9.26188f, 2.03379f, 0.0102668f, 6.32776f, 0.990702f, 12.6169f, 0.922453f, 8.69792f, 0.950093f, 14.5694f, 2.15189f, 1.02061f, 4.96749f, 2.51014f, 9.56114f, 6.31429f, 2.70394f, 3.03422f, 5.81814f, 0.0735231f, 4.37365f, 7.39141f, 5.0493f, 8.14367f, 4.36195f, 3.2765f, 4.71303f, 8.0187f, 1.26291f, 1.27828f, 2.36977f, 8.86564f, 9.77864f, 14.7894f, 13.456f, 5.03154f, 8.62485f, 2.38906f, 6.66399f, 5.71788f, 0.0f, 10.6974f, 17.4808f, 11.2575f, 13.8218f, 0.116706f, 2.91427f, 4.00303f, 1.63026f, 5.12672f, 22.4281f, 2.39126f, 8.39425f, 10.8591f, 8.32402f, 4.29345f, 5.88407f};
    LoopUpTable* lut = new LoopUpTable();
    lut->_centroidNum = 16;
    lut->_fragmentNum = 32;
    lut->_distanceArray = new(std::nothrow) distance_t[lut->_centroidNum * lut->_fragmentNum];
    std::copy(test_lut, test_lut + 512, lut->_distanceArray);
    lut->quantizeLoopUpTable();
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[0], 17);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[21], 40);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[495], 0);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[511], 50);
    ASSERT_EQ(lut->getScale(), 8.71879292f);
    ASSERT_EQ(lut->getBias(), 4.4322629f);

    size_t capacity = lut->getFragmentNum() * lut->getCentroidNum();
    const uint8_t *quantizedLut = 
        reinterpret_cast<const uint8_t *>(lut->GetQDistanceArray());
    uint8_t* packedLut = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    for (size_t i = 0; i < lut->getFragmentNum(); i++) {
        for (size_t j = 0; j < lut->getCentroidNum(); ++j) {
            packedLut[i * lut->getCentroidNum() + j] = quantizedLut[i * lut->getCentroidNum() + j];
        }
    }

    const uint8_t test_codes[512] = {164, 142, 119, 137, 106, 204, 204, 64, 217, 84, 6, 175, 155, 50, 62, 20, 228, 78, 57, 137, 74, 198, 165, 64, 215, 91, 108, 95, 78, 178, 60, 22, 52, 200, 183, 137, 245, 126, 173, 64, 131, 91, 156, 175, 174, 162, 56, 22, 135, 206, 135, 137, 10, 207, 70, 64, 215, 235, 98, 111, 56, 82, 51, 22, 9, 94, 167, 137, 148, 195, 70, 64, 219, 91, 101, 95, 187, 114, 51, 22, 37, 238, 38, 137, 234, 192, 117, 48, 208, 91, 148, 95, 21, 2, 52, 22, 251, 190, 183, 137, 42, 192, 197, 64, 214, 220, 46, 175, 177, 2, 57, 54, 164, 206, 7, 137, 234, 198, 166, 64, 216, 91, 214, 79, 56, 66, 245, 22, 157, 174, 247, 137, 42, 195, 181, 64, 214, 91, 34, 239, 40, 82, 62, 22, 191, 238, 183, 137, 10, 204, 239, 64, 217, 91, 194, 175, 215, 226, 63, 22, 16, 110, 119, 137, 71, 200, 10, 64, 93, 91, 147, 143, 173, 162, 225, 82, 254, 126, 167, 9, 74, 195, 244, 64, 88, 91, 119, 63, 29, 162, 63, 22, 45, 48, 33, 137, 138, 201, 71, 64, 223, 89, 114, 223, 75, 227, 48, 22, 180, 142, 119, 137, 42, 199, 184, 64, 215, 91, 215, 127, 21, 114, 62, 182, 153, 174, 87, 130, 106, 202, 197, 64, 223, 91, 253, 143, 138, 130, 56, 22, 50, 206, 180, 135, 250, 206, 34, 64, 210, 91, 166, 191, 185, 242, 49, 20, 4, 149, 7, 137, 234, 224, 13, 75, 220, 91, 147, 159, 68, 66, 59, 22, 235, 94, 247, 137, 154, 201, 0, 64, 208, 91, 29, 95, 178, 82, 59, 22, 83, 165, 7, 73, 106, 202, 187, 64, 209, 91, 142, 239, 4, 172, 50, 17, 207, 142, 199, 137, 154, 194, 19, 64, 219, 91, 12, 239, 18, 162, 60, 214, 88, 222, 39, 137, 10, 207, 82, 64, 208, 59, 163, 79, 216, 210, 58, 22, 2, 238, 254, 137, 42, 201, 6, 64, 213, 203, 12, 207, 118, 194, 55, 22, 161, 126, 71, 137, 202, 201, 34, 78, 222, 91, 225, 143, 176, 46, 55, 22, 101, 205, 39, 135, 106, 204, 89, 64, 213, 75, 99, 95, 105, 226, 53, 22, 27, 158, 119, 137, 90, 203, 153, 32, 217, 91, 157, 175, 71, 226, 57, 22, 175, 30, 103, 137, 154, 196, 169, 64, 218, 59, 2, 111, 101, 110, 50, 22, 50, 30, 7, 137, 58, 146, 75, 126, 216, 91, 255, 191, 172, 130, 53, 22, 155, 206, 7, 137, 186, 198, 155, 70, 223, 91, 153, 28, 246, 130, 63, 22, 73, 62, 103, 141, 58, 195, 142, 64, 216, 91, 16, 143, 147, 222, 50, 20, 234, 62, 87, 137, 136, 192, 161, 64, 215, 91, 80, 47, 117, 215, 53, 22, 159, 62, 103, 137, 234, 202, 22, 64, 30, 91, 128, 100, 215, 130, 55, 17, 84, 158, 215, 141, 197, 193, 221, 75, 218, 123, 225, 255, 112, 82, 50, 54};
    uint8_t * packedCodes32 = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    std::copy(test_codes, test_codes + 512, packedCodes32);
    std::vector<DistNode> dist_nodes;
    dist_nodes.reserve(32);
    for (docid_t i = 0; i < 32; i++) {
        dist_nodes.emplace_back(i, 0, 0U);
    }
    FastScanScorer scorer;
    scorer.score(packedLut, packedCodes32, lut->_fragmentNum, lut->getScale(), lut->getBias(), 0UL, 32UL, &dist_nodes);
    std::cout << "The result distances: ";
    for (int i = 0; i < 32; i++) {
        std::cout << dist_nodes[i].dist;
        if (i != 31) {
            std::cout << "; ";
        }
    }
    std::cout << std::endl;
    const distance_t true_distances[32] = {4.43226, 168.446, 129.45, 137.822, 126.009, 177.277, 107.543, 142.984, 120.274, 169.708, 159.614, 133.235, 159.156, 121.077, 135.987, 140.346, 122.912, 152.389, 139.084, 137.937, 153.88, 142.295, 126.582, 170.855, 130.023, 136.905, 140.69, 107.772, 130.367, 128.188, 157.091, 129.908};
    for (int i = 0; i < 32; i++) {
        ASSERT_NEAR(dist_nodes[i].dist, true_distances[i], 0.001f);
    }
    delete lut;
    free(packedLut);
    free(packedCodes32);
}

TEST_F(IvfFastScanKernelTest, TestDistanceComputation2) {
    float test_lut[] = {2.59253f, 2.77576f, 4.54852f, 2.51683f, 0.201648f, 0.365324f, 3.11946f, 4.06567f, 1.26194f, 1.96853f, 0.0237051f, 1.97174f, 1.29246f, 5.13791f, 6.40431f, 2.27396f, 9.04906f, 4.99397f, 5.91515f, 5.57458f, 4.55237f, 0.0911238f, 6.82533f, 6.22774f, 3.30597f, 1.68865f, 2.89552f, 3.67454f, 9.568f, 10.3819f, 8.99448f, 11.9666f, 1.56239f, 6.68939f, 0.309607f, 1.25849f, 5.59139f, 2.4018f, 1.68228f, 1.17426f, 2.04544f, 1.5511f, 1.48854f, 8.44894f, 1.78597f, 1.42744f, 3.50647f, 1.60836f, 2.13325f, 1.91281f, 2.27105f, 9.34717f, 1.08187f, 3.41302f, 1.06864f, 1.05303f, 0.0884509f, 0.0655337f, 1.30816f, 7.2559f, 0.238888f, 2.06494f, 3.40045f, 0.470716f, 5.84873f, 4.00222f, 1.90909f, 7.39731f, 1.01053f, 1.5284f, 0.0503441f, 0.758601f, 1.82255f, 1.92552f, 4.15728f, 0.419788f, 1.92732f, 3.45577f, 9.75873f, 5.10184f, 3.35094f, 13.1841f, 1.8798f, 6.10485f, 1.91993f, 0.142699f, 9.12087f, 2.5378f, 0.0546411f, 12.4822f, 1.84061f, 3.49316f, 6.97282f, 0.415622f, 5.15556f, 1.91552f, 2.53097f, 4.30724f, 4.80817f, 0.449226f, 0.844534f, 3.45023f, 6.98677f, 3.48759f, 1.40521f, 3.38803f, 6.19111f, 0.35568f, 4.83609f, 7.48652f, 0.0778038f, 6.8424f, 0.462581f, 5.95511f, 2.50749f, 0.188173f, 1.17601f, 1.76169f, 12.4157f, 2.21125f, 5.63534f, 8.73163f, 18.0786f, 1.11406f, 3.16527f, 4.48437f, 2.64005f, 4.04546f, 5.05111f, 19.9774f, 0.261696f, 11.7021f, 8.08783f, 0.0f, 7.71254f, 8.307f, 5.27179f, 17.4319f, 7.02818f, 0.478383f, 3.74502f, 6.68341f, 8.98263f, 7.02586f, 4.22838f, 3.07271f, 2.00707f, 8.32643f, 0.462884f, 4.21437f, 7.02269f, 0.402477f, 0.0168465f, 6.04711f, 6.76854f, 0.562654f, 13.5805f, 2.7719f, 0.998979f, 3.8857f, 0.204485f, 1.36254f, 1.60794f, 6.88718f, 7.61642f, 3.02847f, 2.54842f, 1.29217f, 13.2691f, 1.21399f, 7.09291f, 0.296745f, 1.91941f, 5.84853f, 2.39519f, 0.0114044f, 0.532131f, 0.90428f, 1.51104f, 3.41303f, 1.73607f, 8.69606f, 7.47905f, 2.20125f, 0.124301f, 2.28346f, 1.1587f, 1.0931f, 3.14746f, 2.2555f, 1.56057f, 3.50223f, 8.27483f, 13.9973f, 2.36732f, 8.44908f, 9.80685f, 16.986f, 7.58566f, 6.08101f, 0.0917171f, 3.43091f, 17.0039f, 5.78735f, 6.88458f, 4.61798f, 11.8307f, 13.5834f, 4.42597f, 0.258395f, 0.730012f, 0.796214f, 0.00808225f, 0.991152f, 1.36112f, 2.4061f, 1.32126f, 1.59068f, 4.35821f, 6.1641f, 1.33763f, 3.58112f, 0.691949f, 0.151105f, 7.4653f, 9.117f, 13.8491f, 13.3241f, 29.5079f, 4.67713f, 0.260733f, 13.0493f, 5.88615f, 18.1867f, 12.8668f, 2.88914f, 14.9194f, 5.91648f, 5.41642f, 12.0915f, 10.8142f, 0.585985f, 4.73977f, 1.23382f, 4.28242f, 3.47759f, 1.70013f, 0.851738f, 1.33213f, 8.28689f, 0.583357f, 5.60207f, 0.963623f, 4.68694f, 5.44456f, 0.00204172f, 9.50827f, 9.62435f, 8.45066f, 0.994281f, 1.77779f, 0.13555f, 1.37152f, 7.77677f, 12.0505f, 2.61836f, 3.71881f, 5.33152f, 5.33725f, 4.56564f, 7.07701f, 10.8666f, 24.4625f, 9.83083f, 1.51282f, 5.07208f, 0.363697f, 1.86804f, 15.8382f, 1.59522f, 5.0709f, 4.16863f, 2.61157f, 6.10016f, 7.66413f, 5.46629f, 2.84054f, 9.25718f, 0.0288069f, 6.40874f, 0.792604f, 1.76354f, 2.1955f, 0.902364f, 2.01468f, 1.67342f, 2.44823f, 0.200599f, 4.39099f, 5.26473f, 2.68673f, 1.75534f, 10.7614f, 2.2694f, 2.46953f, 0.385051f, 0.345863f, 2.35642f, 0.645292f, 2.38869f, 5.17041f, 0.0631847f, 1.71163f, 3.70929f, 1.97539f, 1.26632f, 1.28042f, 2.39909f, 0.450049f, 6.39153f, 0.541583f, 1.07839f, 0.00384209f, 3.34017f, 3.65297f, 0.0738127f, 0.45908f, 1.53925f, 4.40078f, 2.2313f, 2.68306f, 0.23343f, 1.97458f, 2.03345f, 3.13243f, 10.6102f, 15.022f, 8.57289f, 6.37016f, 8.74703f, 11.4728f, 14.6172f, 33.7676f, 2.79878f, 8.31043f, 4.80062f, 9.53904f, 0.177401f, 3.05114f, 7.67008f, 6.07928f, 6.17926f, 0.663994f, 0.110775f, 5.99769f, 5.21193f, 0.308817f, 2.37555f, 1.04944f, 8.21217f, 5.44672f, 2.12649f, 2.48924f, 1.29556f, 2.07379f, 0.512056f, 2.67725f, 3.04389f, 5.45311f, 10.4785f, 6.07171f, 2.21186f, 3.6644f, 3.58156f, 2.45531f, 4.95639f, 3.9749f, 2.29446f, 0.719843f, 2.82839f, 0.639302f, 1.28175f, 4.52755f, 0.0877998f, 4.26045f, 1.88257f, 1.33067f, 2.9204f, 0.0313956f, 0.95618f, 2.9822f, 7.49051f, 0.106151f, 4.42644f, 0.902781f, 5.30945f, 0.944598f, 7.46257f, 0.127164f, 0.74445f, 1.07975f, 7.52398f, 3.20826f, 6.03321f, 11.7592f, 0.424736f, 2.9811f, 0.171131f, 8.30083f, 3.47823f, 4.09248f, 3.44223f, 4.47552f, 3.40922f, 10.9378f, 2.01814f, 5.48038f, 0.795786f, 2.23867f, 2.07909f, 16.3348f, 1.60291f, 3.33823f, 0.0f, 16.4973f, 1.21814f, 7.71169f, 3.46583f, 0.263254f, 5.60018f, 2.60581f, 8.88343f, 7.01309f, 2.1385f, 29.53f, 22.9184f, 0.0f, 7.02496f, 1.99325f, 9.66328f, 1.70801f, 1.32314f, 5.30117f, 5.11354f, 13.0419f, 6.92064f, 8.98635f, 2.96772f, 2.20328f, 4.87013f, 2.15277f, 0.922453f, 0.990702f, 3.79605f, 0.0102668f, 0.950093f, 9.57632f, 6.63993f, 1.06783f, 7.38067f, 1.10941f, 6.32776f, 0.975322f, 3.96948f, 4.96749f, 16.8198f, 3.33308f, 5.0493f, 4.37365f, 8.72671f, 7.33744f, 2.88824f, 2.51014f, 14.2407f, 6.31429f, 13.5105f, 2.70394f, 2.51325f, 8.73278f, 0.221982f, 1.26291f, 3.1076f, 17.272f, 15.516f, 8.1944f, 13.8641f, 14.0626f, 0.568126f, 9.86419f, 10.9794f, 5.81137f, 2.94711f, 2.42078f, 6.43698f, 6.97634f, 4.09726f, 13.9476f, 17.4808f, 3.51075f, 1.38751f, 10.8591f, 11.2575f, 22.4281f, 5.88407f, 8.35462f, 4.29345f, 1.78085f, 9.0999f, 0.597815f, 3.67788f, 7.57656f, 10.152f};
    LoopUpTable* lut = new LoopUpTable();
    lut->_centroidNum = 16;
    lut->_fragmentNum = 32;
    lut->_distanceArray = new(std::nothrow) distance_t[lut->_centroidNum * lut->_fragmentNum];
    std::copy(test_lut, test_lut + 512, lut->_distanceArray);
    lut->quantizeLoopUpTable();
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[0], 20);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[21], 0);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[495], 27);
    ASSERT_EQ(((uint8_t *)lut->GetQDistanceArray())[511], 73);
    ASSERT_EQ(lut->getScale(), 7.59150028f);
    ASSERT_EQ(lut->getBias(), 3.94783068f);

    size_t capacity = lut->getFragmentNum() * lut->getCentroidNum();
    const uint8_t *quantizedLut = 
        reinterpret_cast<const uint8_t *>(lut->GetQDistanceArray());
    uint8_t* packedLut = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    for (size_t i = 0; i < lut->getFragmentNum(); i++) {
        for (size_t j = 0; j < lut->getCentroidNum(); ++j) {
            packedLut[i * lut->getCentroidNum() + j] = quantizedLut[i * lut->getCentroidNum() + j];
        }
    }

    const uint8_t test_codes[512] = {218, 42, 224, 38, 29, 248, 248, 171, 12, 132, 145, 55, 197, 49, 12, 10, 133, 88, 230, 38, 93, 25, 248, 91, 76, 131, 161, 135, 149, 56, 1, 10, 2, 18, 231, 38, 125, 165, 248, 43, 44, 212, 145, 55, 53, 60, 2, 10, 41, 52, 92, 38, 189, 55, 248, 251, 172, 68, 145, 151, 5, 225, 0, 7, 182, 82, 227, 38, 109, 42, 248, 219, 44, 84, 145, 87, 68, 50, 10, 9, 248, 245, 234, 38, 141, 123, 248, 11, 172, 84, 147, 87, 37, 63, 1, 10, 126, 225, 239, 38, 157, 67, 72, 107, 12, 132, 145, 215, 229, 57, 6, 10, 211, 79, 186, 38, 237, 74, 248, 59, 156, 148, 152, 55, 5, 53, 113, 8, 165, 207, 230, 186, 157, 111, 72, 219, 44, 116, 145, 7, 27, 51, 8, 10, 72, 255, 229, 38, 189, 169, 248, 91, 188, 212, 145, 215, 181, 49, 8, 10, 111, 160, 238, 38, 142, 178, 243, 139, 92, 84, 145, 39, 213, 58, 5, 10, 120, 24, 209, 38, 141, 185, 248, 139, 236, 228, 145, 23, 133, 58, 15, 10, 232, 11, 226, 38, 45, 38, 248, 251, 140, 86, 145, 135, 244, 48, 11, 10, 68, 44, 225, 38, 173, 99, 248, 75, 156, 84, 145, 23, 149, 58, 12, 10, 102, 88, 128, 43, 173, 53, 248, 235, 172, 132, 145, 39, 37, 59, 2, 10, 15, 93, 234, 38, 125, 93, 252, 171, 108, 52, 145, 231, 149, 63, 8, 10, 229, 148, 237, 38, 61, 95, 248, 91, 140, 75, 145, 103, 53, 61, 11, 10, 164, 58, 230, 38, 29, 134, 251, 95, 204, 52, 145, 55, 66, 50, 4, 10, 96, 214, 188, 37, 173, 125, 248, 91, 236, 100, 145, 16, 181, 55, 7, 10, 23, 229, 234, 38, 109, 190, 248, 11, 188, 100, 145, 87, 245, 53, 11, 10, 194, 62, 228, 38, 189, 103, 248, 107, 171, 4, 145, 231, 53, 24, 13, 10, 155, 34, 226, 37, 189, 54, 248, 73, 12, 20, 145, 62, 37, 55, 12, 10, 209, 235, 225, 38, 237, 230, 248, 235, 44, 36, 145, 87, 69, 60, 14, 10, 159, 192, 235, 38, 173, 202, 248, 219, 12, 212, 145, 247, 149, 62, 76, 10, 132, 243, 229, 47, 213, 94, 248, 11, 172, 148, 193, 87, 62, 32, 6, 10, 215, 100, 56, 38, 109, 224, 198, 251, 124, 4, 145, 55, 165, 49, 1, 10, 7, 203, 239, 38, 13, 108, 248, 251, 66, 52, 145, 129, 213, 44, 3, 10, 100, 119, 229, 38, 141, 122, 248, 218, 188, 216, 145, 7, 202, 48, 12, 10, 166, 8, 235, 35, 13, 133, 248, 171, 60, 148, 145, 39, 101, 56, 1, 10, 111, 6, 236, 38, 45, 107, 247, 139, 60, 228, 145, 247, 197, 60, 14, 10, 135, 14, 157, 38, 237, 205, 248, 123, 252, 180, 145, 135, 229, 52, 13, 10, 60, 105, 130, 46, 77, 65, 248, 171, 236, 59, 145, 119, 59, 213, 5, 10};
    uint8_t * packedCodes32 = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    std::copy(test_codes, test_codes + 512, packedCodes32);
    std::vector<DistNode> dist_nodes;
    dist_nodes.reserve(31);
    for (docid_t i = 0; i < 31; i++) {
        dist_nodes.emplace_back(i, 0, 0U);
    }
    FastScanScorer scorer;
    scorer.score(packedLut, packedCodes32, lut->_fragmentNum, lut->getScale(), lut->getBias(), 0UL, 31UL, &dist_nodes);
    std::cout << "The result distances: ";
    for (int i = 0; i < 31; i++) {
        std::cout << dist_nodes[i].dist << "; ";
    }
    std::cout << std::endl;
    const distance_t true_distances[31] = {3.94783, 154.379, 129.483, 132.513, 126.585, 186.52, 117.101, 147.003, 125.004, 159.385, 181.251, 130.537, 156.619, 114.73, 132.117, 138.836, 110.251, 155.828, 134.752, 153.721, 146.739, 156.355, 135.938, 166.893, 125.004, 143.578, 136.201, 107.748, 124.214, 124.477, 166.103};
    for (int i = 0; i < 31; i++) {
        ASSERT_NEAR(dist_nodes[i].dist, true_distances[i], 0.001f);
    }
    delete lut;
    free(packedLut);
    free(packedCodes32);
}

TEST_F(IvfFastScanKernelTest, TestDistanceComputation3) {
    float test_lut[] = {4.35982f, 0.0313186f, 1.4222f, 1.96864f, 0.0880366f, 2.35791f, 1.6538f, 0.763355f, 2.25666f, 6.40431f, 0.990193f, 0.996937f, 6.54913f, 4.32816f, 2.85668f, 1.94962f, 5.91515f, 1.08977f, 10.566f, 2.68965f, 3.89634f, 9.04906f, 4.72597f, 5.27466f, 20.3536f, 8.99448f, 0.134141f, 6.21651f, 3.34237f, 1.86241f, 6.16329f, 1.44795f, 0.251005f, 0.997757f, 1.78597f, 2.05911f, 1.48854f, 1.56239f, 3.47308f, 0.528549f, 0.0886656f, 6.68939f, 1.17426f, 1.44471f, 6.61901f, 3.50647f, 1.68228f, 1.25849f, 1.97697f, 0.470716f, 0.238888f, 0.0655337f, 0.645362f, 1.72858f, 0.0884509f, 3.14726f, 0.587869f, 9.34717f, 7.2559f, 1.07446f, 1.91959f, 3.362f, 1.1213f, 1.49989f, 3.84552f, 2.22006f, 3.95318f, 1.92552f, 4.15728f, 5.84873f, 1.8528f, 7.39731f, 1.73461f, 9.75873f, 0.990008f, 2.34842f, 0.803754f, 0.508673f, 0.0503441f, 1.04605f, 3.49316f, 0.218514f, 6.14398f, 12.4822f, 2.05815f, 3.03104f, 1.03045f, 13.1841f, 1.18681f, 5.15556f, 0.733832f, 0.0844582f, 3.14893f, 2.17886f, 9.12087f, 1.8798f, 4.80817f, 4.06636f, 4.83609f, 3.01737f, 6.19111f, 3.0828f, 0.493513f, 5.17975f, 7.48652f, 1.14678f, 3.48294f, 1.93803f, 3.56058f, 3.48759f, 7.9926f, 0.105467f, 2.50484f, 3.96701f, 2.21125f, 8.77615f, 14.0625f, 2.63251f, 5.63534f, 7.90572f, 9.57344f, 0.648116f, 2.64005f, 22.8076f, 1.60089f, 4.4126f, 12.4157f, 0.110405f, 0.23139f, 6.00101f, 3.74502f, 16.6719f, 5.83239f, 7.10552f, 6.62911f, 4.25648f, 7.71254f, 8.32631f, 18.2266f, 9.39906f, 13.0499f, 7.90935f, 7.67037f, 19.9774f, 2.00707f, 4.50633f, 13.5805f, 5.74871f, 6.67652f, 3.31884f, 0.20539f, 0.00172217f, 2.07985f, 0.998979f, 0.574016f, 2.04337f, 3.07271f, 0.462884f, 5.3741f, 0.708158f, 1.60794f, 0.0940975f, 1.58179f, 1.21399f, 7.1425f, 0.204485f, 6.88718f, 2.21316f, 3.40502f, 2.08538f, 13.2691f, 3.98552f, 7.61642f, 3.16853f, 2.00542f, 5.84853f, 1.21805f, 0.00533785f, 3.22828f, 1.98967f, 1.73607f, 0.380453f, 0.202246f, 4.14473f, 0.516785f, 8.69606f, 1.25063f, 1.86127f, 3.56964f, 2.48658f, 7.47905f, 0.646236f, 2.65842f, 5.82314f, 7.23702f, 3.43091f, 17.0039f, 8.05114f, 0.0343394f, 6.15533f, 1.47358f, 12.983f, 3.1137f, 16.986f, 8.85772f, 11.7565f, 8.0668f, 15.6189f, 0.730012f, 2.2525f, 1.02057f, 2.06917f, 6.101f, 4.42597f, 0.855258f, 0.721098f, 0.941123f, 0.754049f, 3.60757f, 1.39392f, 3.75787f, 0.020437f, 4.7854f, 1.0372f, 13.3241f, 4.77858f, 15.3018f, 29.5079f, 11.9434f, 6.92726f, 5.01092f, 15.1493f, 9.90955f, 6.21426f, 14.832f, 5.41642f, 12.0915f, 0.260733f, 2.88914f, 13.7894f, 4.31868f, 4.68694f, 0.867454f, 8.5582f, 0.582618f, 6.50226f, 1.08964f, 1.33213f, 0.407428f, 5.16649f, 1.05199f, 1.05402f, 0.00204172f, 13.6569f, 1.67135f, 8.08622f, 8.10746f, 1.16113f, 5.33725f, 2.61836f, 3.71881f, 9.56087f, 12.0505f, 5.22836f, 4.65135f, 10.8666f, 0.0267367f, 1.44692f, 3.83899f, 6.57551f, 1.37152f, 1.11171f, 1.51282f, 2.75634f, 7.89422f, 4.75087f, 2.47088f, 24.4625f, 15.963f, 0.0275884f, 2.70263f, 2.15533f, 12.2612f, 5.07208f, 1.05381f, 5.0709f, 15.1f, 0.77503f, 1.31486f, 2.60926f, 2.19171f, 0.355144f, 5.30037f, 0.0288069f, 1.96709f, 3.7122f, 3.46548f, 5.37237f, 6.40874f, 1.52051f, 0.957478f, 2.45407f, 1.24016f, 10.7614f, 2.37669f, 2.85046f, 0.508391f, 3.70929f, 1.97539f, 2.46953f, 1.34164f, 1.26022f, 1.88064f, 0.445357f, 7.74796f, 3.75244f, 2.05655f, 0.117836f, 4.59637f, 6.39153f, 0.00482792f, 4.89997f, 0.23343f, 2.2313f, 2.05809f, 1.07839f, 4.32497f, 3.50422f, 3.35041f, 2.59847f, 0.541583f, 1.68334f, 4.53538f, 3.65008f, 0.476769f, 3.58318f, 5.7004f, 7.457f, 3.65012f, 5.32821f, 12.8189f, 15.022f, 8.91169f, 2.72404f, 7.59047f, 6.07928f, 0.177401f, 8.63467f, 2.79878f, 4.58838f, 33.7676f, 5.39974f, 4.42383f, 1.45619f, 1.99848f, 3.04389f, 2.48924f, 0.663994f, 5.30888f, 7.08742f, 0.000989616f, 1.29412f, 3.88333f, 8.22359f, 2.28474f, 0.416083f, 1.04944f, 0.386875f, 6.07171f, 5.45311f, 0.0877998f, 2.80211f, 0.699826f, 7.40125f, 3.7704f, 0.63835f, 1.94068f, 4.80575f, 1.13155f, 0.760492f, 4.3066f, 2.10824f, 2.42253f, 4.95639f, 1.06657f, 1.91468f, 0.653824f, 1.30439f, 3.31887f, 3.38485f, 0.390064f, 2.9822f, 0.581849f, 0.741778f, 7.46257f, 4.42644f, 4.26045f, 0.0213943f, 0.878819f, 3.98003f, 3.20826f, 12.2258f, 4.37096f, 3.45672f, 4.13739f, 1.53475f, 8.30083f, 6.57777f, 2.02982f, 7.83266f, 3.26572f, 0.0476879f, 10.5884f, 1.30355f, 3.13007f, 4.56753f, 2.45865f, 3.35855f, 1.88982f, 1.21814f, 10.151f, 4.01715f, 15.6891f, 2.35405f, 1.08602f, 1.28041f, 5.76906f, 1.82556f, 0.105451f, 7.01958f, 3.55145f, 5.60018f, 29.53f, 6.86808f, 11.3105f, 0.575602f, 5.43478f, 7.11577f, 1.25957f, 22.9184f, 6.49936f, 8.98635f, 2.81503f, 9.2582f, 5.86218f, 2.00225f, 2.49144f, 13.9719f, 2.15277f, 12.6169f, 2.30808f, 5.03039f, 0.985234f, 1.94932f, 9.26188f, 4.87013f, 5.86138f, 0.975322f, 4.28665f, 7.04298f, 8.69792f, 1.34633f, 0.73736f, 0.0102668f, 3.33308f, 7.88418f, 2.70394f, 14.2407f, 5.4547f, 4.96749f, 0.32992f, 8.03045f, 2.79203f, 8.72671f, 2.51325f, 10.2267f, 4.37365f, 14.5694f, 5.81814f, 0.950165f, 16.3821f, 5.96314f, 1.84687f, 11.9551f, 5.74308f, 0.561293f, 8.34705f, 7.95357f, 4.38798f, 10.0899f, 8.91622f, 2.4854f, 8.1944f, 13.33f, 14.0626f, 6.66399f, 5.12672f, 3.98533f, 2.39126f, 5.44675f, 2.65912f, 13.9476f, 8.36329f, 10.4629f, 15.9189f, 8.33883f, 9.7586f, 1.63026f, 14.4011f, 2.91427f, 22.4281f, 0.116706f};
    LoopUpTable* lut = new LoopUpTable();
    lut->_centroidNum = 16;
    lut->_fragmentNum = 32;
    lut->_distanceArray = new(std::nothrow) distance_t[lut->_centroidNum * lut->_fragmentNum];
    std::copy(test_lut, test_lut + 512, lut->_distanceArray);
    lut->quantizeLoopUpTable();

    size_t capacity = lut->getFragmentNum() * lut->getCentroidNum();
    const uint8_t *quantizedLut = 
        reinterpret_cast<const uint8_t *>(lut->GetQDistanceArray());
    uint8_t* packedLut = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    for (size_t i = 0; i < lut->getFragmentNum(); i++) {
        for (size_t j = 0; j < lut->getCentroidNum(); ++j) {
            packedLut[i * lut->getCentroidNum() + j] = quantizedLut[i * lut->getCentroidNum() + j];
        }
    }

    const uint8_t test_codes[1024] = {209, 1, 152, 14, 173, 230, 102, 67, 130, 180, 58, 208, 244, 92, 87, 132, 218, 161, 158, 14, 162, 115, 38, 163, 66, 110, 55, 183, 241, 236, 87, 132, 88, 145, 218, 14, 171, 67, 182, 12, 114, 188, 57, 250, 243, 242, 87, 132, 3, 155, 210, 14, 172, 158, 22, 26, 242, 176, 60, 53, 253, 220, 87, 132, 222, 177, 151, 142, 226, 132, 38, 45, 6, 191, 59, 253, 255, 124, 84, 131, 219, 161, 148, 254, 166, 80, 219, 80, 130, 22, 50, 181, 251, 44, 87, 132, 223, 241, 241, 14, 168, 150, 150, 230, 178, 191, 49, 141, 245, 108, 87, 84, 223, 241, 155, 14, 173, 244, 214, 249, 112, 117, 54, 146, 240, 156, 39, 134, 224, 33, 152, 14, 166, 133, 150, 96, 2, 185, 63, 121, 240, 188, 87, 212, 215, 17, 158, 14, 165, 51, 22, 138, 242, 189, 60, 86, 254, 28, 55, 132, 209, 69, 153, 14, 169, 16, 22, 161, 178, 188, 50, 9, 247, 100, 87, 132, 209, 161, 186, 14, 107, 3, 214, 96, 178, 180, 58, 93, 249, 44, 87, 136, 214, 81, 152, 14, 167, 142, 246, 241, 98, 190, 57, 130, 254, 124, 87, 132, 221, 1, 157, 8, 174, 137, 214, 222, 50, 189, 55, 123, 251, 156, 87, 132, 221, 22, 149, 254, 165, 1, 201, 190, 66, 147, 40, 242, 241, 14, 87, 132, 220, 81, 148, 14, 161, 1, 198, 64, 226, 185, 52, 154, 254, 172, 87, 132, 218, 59, 216, 14, 188, 25, 150, 173, 98, 183, 53, 224, 250, 252, 87, 132, 23, 177, 154, 14, 163, 222, 34, 194, 34, 188, 58, 185, 240, 176, 95, 132, 213, 1, 146, 14, 64, 192, 102, 9, 248, 182, 58, 165, 147, 12, 87, 136, 221, 145, 148, 46, 160, 121, 246, 87, 130, 178, 57, 18, 252, 12, 87, 132, 208, 241, 155, 14, 46, 228, 214, 226, 66, 175, 53, 148, 240, 92, 167, 132, 218, 17, 145, 4, 168, 190, 54, 67, 82, 180, 59, 185, 244, 188, 87, 134, 216, 145, 153, 14, 173, 174, 54, 145, 2, 189, 40, 11, 241, 108, 87, 132, 210, 65, 158, 14, 168, 116, 38, 142, 23, 184, 53, 47, 214, 172, 87, 132, 221, 97, 217, 14, 169, 93, 230, 197, 130, 189, 52, 148, 253, 28, 199, 136, 219, 140, 150, 14, 226, 157, 42, 83, 178, 81, 55, 251, 251, 156, 87, 132, 220, 129, 148, 14, 175, 236, 70, 65, 66, 182, 57, 105, 241, 12, 87, 132, 211, 177, 148, 14, 171, 180, 230, 20, 130, 182, 61, 139, 244, 124, 95, 132, 223, 92, 150, 14, 91, 26, 44, 74, 226, 190, 55, 14, 250, 92, 87, 52, 22, 81, 114, 14, 10, 29, 104, 109, 66, 188, 61, 248, 41, 66, 87, 132, 213, 81, 151, 14, 167, 39, 134, 187, 130, 188, 59, 98, 247, 12, 87, 132, 223, 225, 155, 9, 173, 168, 150, 250, 146, 186, 60, 51, 186, 220, 87, 132, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint8_t * packedCodes32 = reinterpret_cast<uint8_t*>(aligned_alloc(32, 1024));
    std::copy(test_codes, test_codes + 1024, packedCodes32);
    std::vector<DistNode> dist_nodes;
    dist_nodes.reserve(34);
    for (docid_t i = 0; i < 34; i++) {
        dist_nodes.emplace_back(i, 0, 0U);
    }
    FastScanScorer scorer;
    scorer.score(packedLut, packedCodes32, lut->_fragmentNum, lut->getScale(), lut->getBias(), 0UL, 34UL, &dist_nodes);
    std::cout << "The result distances: ";
    for (int i = 0; i < 34; i++) {
        std::cout << dist_nodes[i].dist << "; ";
    }
    std::cout << std::endl;
    const distance_t true_distances[34] = {3.56074, 151.489, 134.76, 134.497, 127.12, 177.966, 107.229, 156.1, 120.402, 155.705, 179.284, 121.192, 160.315, 116.714, 141.742, 138.712, 118.294, 150.962, 146.484, 141.478, 141.478, 155.046, 139.502, 166.901, 125.408, 140.951, 138.053, 107.888, 131.599, 127.515, 160.974, 129.096, 102.487, 136.868};
    for (int i = 0; i < 34; i++) {
        ASSERT_NEAR(dist_nodes[i].dist, true_distances[i], 0.001f);
    }
    delete lut;
    free(packedLut);
    free(packedCodes32);
}

TEST_F(IvfFastScanKernelTest, TestDistanceComputation4) {
    float test_lut[] = {1.27561f, 2.31987f, 6.54913f, 5.13791f, 0.825347f, 1.41724f, 0.183323f, 1.86765f, 3.59774f, 0.904482f, 2.96159f, 0.055822f, 0.445717f, 2.27396f, 2.1975f, 1.27523f, 5.20863f, 0.156257f, 5.20628f, 0.63856f, 8.39333f, 4.61289f, 1.3034f, 9.63002f, 2.61422f, 7.3191f, 6.32319f, 3.13498f, 7.54532f, 16.0626f, 10.2992f, 1.24187f, 8.18891f, 1.94558f, 6.06074f, 10.3013f, 0.550421f, 1.46504f, 1.89297f, 0.865841f, 6.2343f, 4.74258f, 1.5431f, 6.58685f, 3.27754f, 1.61692f, 2.84889f, 0.0180086f, 1.00046f, 1.41172f, 1.91959f, 1.76676f, 1.71392f, 0.0659166f, 0.470716f, 1.10466f, 9.21812f, 2.51876f, 5.47471f, 11.325f, 4.06543f, 0.25068f, 0.571014f, 5.23443f, 4.74412f, 1.82407f, 5.94107f, 0.731578f, 5.92364f, 3.56172f, 3.45577f, 1.34746f, 3.25093f, 1.37633f, 2.36903f, 1.14838f, 0.427521f, 5.51599f, 10.8312f, 0.275901f, 1.03045f, 8.91647f, 11.8236f, 6.59533f, 2.89926f, 0.0113588f, 3.57153f, 0.723639f, 0.97893f, 3.00625f, 4.6669f, 0.794292f, 4.61169f, 2.48142f, 0.789375f, 7.63375f, 2.84506f, 0.543684f, 4.67655f, 2.66174f, 4.24215f, 4.80817f, 7.9926f, 16.3062f, 2.11834f, 2.66375f, 0.181554f, 0.541257f, 5.47318f, 0.824376f, 4.8245f, 0.684237f, 14.2576f, 19.9112f, 8.85832f, 7.57702f, 2.89896f, 4.98293f, 0.765033f, 1.45346f, 1.3832f, 2.178f, 9.648f, 8.23625f, 2.7131f, 3.75411f, 8.30533f, 0.113396f, 19.3685f, 3.44515f, 15.5385f, 0.935607f, 2.53601f, 8.40423f, 7.42803f, 6.13703f, 5.25972f, 0.382368f, 17.8291f, 7.71254f, 13.8677f, 9.79688f, 4.42356f, 7.28202f, 7.46179f, 6.00254f, 2.90812f, 0.839424f, 1.75053f, 0.0627011f, 4.68693f, 8.95468f, 2.87157f, 3.44844f, 3.48737f, 0.43906f, 1.91464f, 8.62513f, 4.55035f, 0.925255f, 2.28243f, 4.95785f, 0.608103f, 2.95574f, 3.39581f, 7.52865f, 16.5446f, 1.60378f, 2.77415f, 7.1425f, 4.5748f, 1.3371f, 5.76258f, 0.0690563f, 2.0546f, 9.14503f, 1.85089f, 0.373249f, 1.52592f, 0.0454034f, 3.02442f, 1.29193f, 0.433676f, 1.57911f, 1.17232f, 4.4391f, 1.28764f, 8.20023f, 3.37786f, 7.15374f, 8.38115f, 1.30414f, 5.99935f, 8.99191f, 13.7473f, 3.34801f, 9.5549f, 0.0917171f, 15.327f, 13.7541f, 17.2911f, 22.6808f, 6.93828f, 6.09277f, 2.30718f, 11.0968f, 2.63216f, 2.56108f, 5.84861f, 1.46368f, 0.521827f, 0.630045f, 0.00398248f, 1.38425f, 0.715891f, 1.70758f, 3.84586f, 0.730012f, 2.16057f, 0.699649f, 4.46498f, 0.381555f, 8.93682f, 1.49546f, 3.6911f, 9.91536f, 11.6746f, 14.0708f, 15.5912f, 6.50642f, 7.62492f, 0.863365f, 3.41048f, 13.7942f, 4.98849f, 4.75443f, 3.45936f, 12.0915f, 8.33406f, 25.8923f, 3.97344f, 0.774886f, 1.74875f, 15.9136f, 6.70403f, 0.989891f, 0.665017f, 1.05577f, 9.14688f, 3.7156f, 6.2811f, 0.144233f, 1.55381f, 0.0643227f, 2.79245f, 0.00306035f, 2.80264f, 4.04064f, 10.4208f, 6.3459f, 0.955201f, 16.7473f, 0.154049f, 2.47099f, 4.3766f, 4.88208f, 1.14877f, 1.26568f, 0.206882f, 9.30265f, 0.11221f, 3.75966f, 4.10338f, 19.7382f, 12.1747f, 1.87403f, 1.39877f, 7.39451f, 1.98192f, 0.0296115f, 3.19969f, 19.5032f, 0.985961f, 7.23171f, 2.40924f, 9.61102f, 5.53764f, 3.29284f, 1.52773f, 3.0229f, 6.40874f, 5.95946f, 11.5655f, 2.3565f, 0.390156f, 0.797719f, 11.1123f, 5.37237f, 1.72114f, 2.90117f, 3.081f, 1.49011f, 10.7614f, 3.65884f, 1.75572f, 1.78249f, 0.487365f, 1.93441f, 0.816677f, 2.12299f, 3.16623f, 7.9849f, 2.22757f, 1.26447f, 3.5784f, 2.47602f, 2.87811f, 6.51902f, 0.0710488f, 7.89004f, 2.66984f, 2.85512f, 0.818962f, 2.88487f, 0.302112f, 3.49912f, 3.50422f, 1.01243f, 1.35504f, 4.51995f, 0.923418f, 0.0142039f, 5.82788f, 10.6102f, 0.71559f, 0.361902f, 7.7447f, 6.37744f, 15.022f, 18.2717f, 8.95935f, 10.4843f, 10.3267f, 2.7203f, 8.45849f, 6.14034f, 4.87832f, 21.3841f, 0.0415142f, 6.82983f, 1.67543f, 4.81673f, 0.962929f, 0.313012f, 0.0377868f, 5.12614f, 2.88356f, 12.5042f, 2.78136f, 4.72839f, 0.960011f, 0.409661f, 2.09174f, 0.720768f, 4.69358f, 2.8877f, 0.847307f, 1.28862f, 0.597164f, 2.4126f, 4.01947f, 2.6321f, 1.38913f, 4.07249f, 1.6415f, 3.80274f, 0.713808f, 2.42253f, 5.85802f, 4.22005f, 10.4825f, 0.120413f, 1.56354f, 0.674968f, 0.823342f, 1.74963f, 1.85986f, 2.9346f, 0.597445f, 0.0436456f, 3.97362f, 0.18442f, 4.24827f, 7.49051f, 0.431007f, 2.18529f, 0.409441f, 0.876759f, 1.97465f, 0.986498f, 8.74598f, 3.93606f, 10.6944f, 0.220598f, 1.63967f, 3.81104f, 1.78083f, 7.69625f, 0.927384f, 2.02982f, 11.3755f, 5.73686f, 5.04449f, 3.89689f, 3.11538f, 11.9711f, 2.60557f, 2.80076f, 0.875484f, 4.74282f, 19.7155f, 15.6891f, 8.85234f, 4.75825f, 6.94421f, 6.72579f, 2.19478f, 0.24494f, 8.31862f, 12.3751f, 1.36386f, 0.503903f, 7.24641f, 8.43079f, 4.69587f, 3.66345f, 11.6935f, 0.548981f, 6.35648f, 19.941f, 8.25f, 1.65821f, 24.4688f, 7.12728f, 15.4972f, 2.18124f, 10.1335f, 1.60075f, 3.38896f, 4.96312f, 5.73951f, 2.15277f, 0.00324323f, 9.57632f, 1.00366f, 0.682123f, 6.76187f, 6.89181f, 0.687991f, 1.84215f, 3.35616f, 5.76252f, 1.71229f, 1.43841f, 8.41361f, 4.77559f, 15.0044f, 3.49065f, 5.68921f, 2.44626f, 2.51014f, 9.34701f, 1.69703f, 0.931808f, 11.9944f, 5.04265f, 15.836f, 0.354558f, 0.452715f, 1.22773f, 8.26522f, 1.88566f, 7.66386f, 18.0693f, 5.33595f, 9.10617f, 0.386019f, 1.08094f, 14.0419f, 8.05858f, 4.12981f, 2.76453f, 9.83694f, 4.0683f, 7.88802f, 12.6061f, 2.39126f, 5.16335f, 17.4808f, 10.4466f, 4.98525f, 8.58114f, 0.346644f, 3.11603f, 11.2575f, 2.65912f, 3.22196f, 1.88937f, 5.60761f, 22.4281f, 3.77435f, 7.85362f};
    LoopUpTable* lut = new LoopUpTable();
    lut->_centroidNum = 16;
    lut->_fragmentNum = 32;
    lut->_distanceArray = new(std::nothrow) distance_t[lut->_centroidNum * lut->_fragmentNum];
    std::copy(test_lut, test_lut + 512, lut->_distanceArray);
    lut->quantizeLoopUpTable();

    size_t capacity = lut->getFragmentNum() * lut->getCentroidNum();
    const uint8_t *quantizedLut = 
        reinterpret_cast<const uint8_t *>(lut->GetQDistanceArray());
    uint8_t* packedLut = reinterpret_cast<uint8_t*>(aligned_alloc(32, capacity));
    for (size_t i = 0; i < lut->getFragmentNum(); i++) {
        for (size_t j = 0; j < lut->getCentroidNum(); ++j) {
            packedLut[i * lut->getCentroidNum() + j] = quantizedLut[i * lut->getCentroidNum() + j];
        }
    }

    const uint8_t test_codes[1536] = {59, 171, 136, 161, 147, 213, 213, 106, 129, 6, 169, 234, 28, 226, 132, 166, 129, 22, 234, 10, 23, 43, 117, 59, 167, 90, 178, 194, 54, 168, 162, 219, 175, 36, 199, 65, 125, 126, 213, 240, 74, 208, 98, 218, 222, 209, 164, 119, 149, 167, 205, 144, 242, 176, 101, 111, 237, 119, 82, 224, 60, 194, 57, 16, 63, 154, 46, 172, 198, 160, 209, 111, 165, 187, 18, 191, 187, 83, 0, 161, 213, 187, 253, 65, 224, 154, 213, 108, 179, 80, 26, 89, 71, 173, 146, 189, 10, 162, 168, 86, 78, 129, 209, 107, 156, 159, 146, 224, 174, 25, 148, 156, 95, 253, 97, 74, 213, 240, 213, 246, 36, 41, 181, 108, 136, 120, 194, 229, 249, 231, 91, 159, 6, 189, 117, 105, 52, 85, 10, 21, 169, 90, 126, 255, 181, 152, 182, 71, 250, 17, 149, 107, 247, 59, 18, 229, 246, 210, 165, 254, 77, 157, 238, 126, 94, 216, 213, 109, 67, 79, 178, 126, 203, 89, 212, 73, 115, 35, 130, 174, 108, 128, 70, 106, 140, 134, 34, 52, 91, 197, 244, 102, 37, 171, 44, 225, 235, 193, 213, 106, 80, 97, 50, 80, 97, 74, 171, 194, 68, 152, 34, 151, 135, 127, 213, 78, 162, 244, 162, 47, 31, 248, 242, 216, 119, 171, 94, 151, 58, 26, 213, 108, 50, 95, 242, 146, 154, 76, 233, 35, 143, 148, 6, 6, 30, 148, 213, 96, 37, 192, 166, 161, 172, 239, 133, 118, 62, 27, 57, 36, 185, 205, 213, 99, 31, 184, 18, 114, 172, 160, 35, 152, 199, 239, 129, 50, 40, 2, 213, 109, 187, 231, 130, 232, 163, 227, 154, 131, 22, 202, 155, 96, 54, 124, 85, 105, 235, 173, 98, 39, 150, 215, 119, 251, 46, 234, 41, 234, 241, 2, 213, 96, 4, 164, 2, 174, 219, 27, 82, 3, 139, 19, 57, 190, 78, 176, 213, 116, 4, 73, 226, 58, 27, 37, 70, 80, 252, 137, 25, 251, 225, 75, 221, 106, 39, 6, 160, 65, 149, 78, 39, 21, 18, 79, 100, 62, 97, 104, 215, 111, 202, 49, 162, 51, 31, 125, 132, 42, 61, 7, 185, 89, 230, 240, 133, 105, 127, 129, 60, 211, 53, 235, 47, 16, 85, 161, 124, 29, 140, 183, 213, 107, 77, 140, 222, 185, 103, 22, 99, 170, 67, 146, 183, 142, 236, 244, 213, 97, 60, 98, 28, 179, 184, 178, 108, 157, 155, 243, 22, 160, 151, 14, 197, 97, 74, 5, 178, 82, 114, 175, 0, 168, 213, 70, 136, 125, 49, 66, 213, 98, 33, 21, 253, 180, 66, 123, 183, 178, 228, 5, 120, 58, 184, 81, 213, 104, 183, 31, 18, 63, 65, 181, 188, 22, 13, 16, 115, 49, 56, 2, 213, 98, 51, 116, 114, 219, 55, 51, 23, 131, 246, 112, 194, 143, 2, 18, 213, 109, 209, 210, 138, 225, 66, 137, 114, 221, 182, 212, 91, 207, 49, 50, 85, 99, 240, 179, 66, 196, 179, 232, 56, 57, 233, 250, 233, 158, 78, 203, 177, 160, 12, 120, 118, 249, 124, 204, 193, 86, 225, 138, 249, 71, 78, 178, 177, 224, 58, 229, 115, 107, 43, 199, 223, 223, 104, 224, 121, 119, 75, 90, 177, 240, 58, 156, 117, 37, 175, 199, 253, 95, 137, 48, 249, 113, 69, 4, 177, 128, 58, 60, 160, 241, 77, 67, 140, 239, 12, 84, 217, 124, 78, 16, 129, 26, 58, 199, 200, 242, 225, 156, 185, 159, 247, 39, 185, 116, 78, 217, 177, 53, 58, 180, 122, 117, 178, 193, 199, 196, 56, 130, 4, 115, 73, 142, 31, 112, 58, 176, 158, 158, 180, 75, 19, 13, 201, 12, 25, 124, 78, 194, 145, 160, 58, 137, 197, 77, 138, 196, 189, 15, 78, 173, 249, 117, 78, 212, 241, 80, 58, 73, 45, 204, 124, 101, 210, 95, 63, 149, 25, 101, 74, 222, 33, 48, 202, 203, 47, 123, 136, 202, 177, 79, 121, 220, 57, 210, 78, 123, 177, 128, 58, 67, 178, 184, 27, 206, 245, 83, 0, 96, 105, 119, 78, 129, 81, 207, 55, 211, 209, 28, 75, 175, 146, 31, 52, 186, 9, 116, 76, 251, 189, 29, 58, 210, 160, 20, 42, 206, 45, 15, 34, 205, 211, 216, 78, 135, 186, 176, 58, 34, 130, 22, 81, 198, 80, 111, 106, 134, 41, 118, 238, 149, 81, 224, 59, 54, 137, 53, 95, 203, 146, 178, 154, 39, 201, 112, 65, 158, 189, 128, 58, 36, 36, 160, 8, 206, 15, 207, 64, 72, 217, 72, 78, 142, 177, 176, 58, 25, 35, 144, 13, 192, 143, 140, 231, 94, 137, 118, 67, 207, 177, 112, 60, 162, 231, 62, 227, 199, 109, 143, 17, 108, 9, 124, 76, 187, 177, 112, 58, 215, 97, 113, 167, 198, 52, 207, 18, 185, 201, 123, 78, 211, 177, 48, 58, 190, 177, 186, 194, 198, 82, 207, 40, 255, 50, 123, 43, 233, 177, 112, 122, 249, 227, 247, 80, 201, 132, 255, 224, 85, 120, 10, 78, 14, 189, 80, 58, 81, 213, 105, 234, 198, 87, 250, 44, 104, 57, 113, 155, 70, 177, 48, 58, 86, 21, 144, 222, 193, 152, 207, 72, 23, 169, 98, 78, 211, 177, 176, 58, 214, 223, 29, 208, 205, 115, 95, 21, 138, 46, 253, 78, 193, 1, 0, 58, 71, 184, 242, 223, 199, 48, 63, 212, 239, 30, 123, 78, 184, 177, 64, 58, 241, 196, 216, 98, 193, 248, 171, 147, 152, 0, 174, 111, 169, 177, 176, 58, 186, 10, 23, 141, 194, 72, 175, 226, 38, 105, 127, 78, 56, 134, 64, 58, 19, 65, 81, 183, 194, 92, 47, 223, 151, 25, 124, 174, 205, 235, 160, 102, 15, 206, 20, 242, 192, 251, 255, 77, 63, 89, 126, 78, 82, 176, 128, 26, 241, 132, 115, 74, 200, 27, 175, 162, 84, 170, 116, 78, 135, 177, 4, 58, 65, 2, 158, 174, 195, 89, 95, 69, 126, 249, 122, 78, 62, 177, 235, 58, 241, 245, 187, 91, 206, 86, 79, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    uint8_t * packedCodes32 = reinterpret_cast<uint8_t*>(aligned_alloc(32, 1536));
    std::copy(test_codes, test_codes + 1536, packedCodes32);
    std::vector<DistNode> dist_nodes;
    dist_nodes.reserve(65);
    for (docid_t i = 0; i < 65; i++) {
        dist_nodes.emplace_back(i, 0, 0U);
    }
    FastScanScorer scorer;
    scorer.score(packedLut, packedCodes32, lut->_fragmentNum, lut->getScale(), lut->getBias(), 0UL, 65UL, &dist_nodes);
    std::cout << "The result distances: ";
    for (int i = 0; i < 65; i++) {
        std::cout << dist_nodes[i].dist << "; ";
    }
    std::cout << std::endl;
    const distance_t true_distances[65] = {5.36544, 164.177, 123.64, 137.97, 114.708, 184.789, 108.328, 151.515, 124.032, 155.932, 178.801, 133.258, 154.95, 116.278, 138.853, 125.897, 116.18, 149.552, 141.7, 145.822, 142.681, 155.343, 137.675, 150.141, 123.836, 127.173, 138.264, 115.787, 123.345, 130.805, 160.545, 121.873, 100.77, 149.552, 119.124, 148.374, 159.858, 137.381, 194.113, 148.374, 132.571, 101.359, 118.928, 150.533, 113.628, 114.904, 109.996, 93.3103, 121.578, 142.583, 128.449, 120.695, 160.447, 136.694, 124.228, 186.654, 146.215, 129.823, 130.216, 153.184, 135.712, 132.081, 147.491, 149.846, 156.03};
    for (int i = 0; i < 65; i++) {
        ASSERT_NEAR(dist_nodes[i].dist, true_distances[i], 0.001f);
    }
    delete lut;
    free(packedLut);
    free(packedCodes32);
}

MERCURY_NAMESPACE_END(core);
